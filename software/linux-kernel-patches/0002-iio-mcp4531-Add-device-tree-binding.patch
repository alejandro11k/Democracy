From ea7c399bb073a63e16718b5d30c695ee719f71be Mon Sep 17 00:00:00 2001
From: Florian Vaussard <florian.vaussard@heig-vd.ch>
Date: Fri, 27 May 2016 11:01:12 +0200
Subject: [PATCH 02/10] iio: mcp4531: Add device tree binding

Signed-off-by: Florian Vaussard <florian.vaussard@heig-vd.ch>
---
 drivers/iio/potentiometer/mcp4531.c | 83 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 82 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/potentiometer/mcp4531.c b/drivers/iio/potentiometer/mcp4531.c
index 835eccd..f787f04 100644
--- a/drivers/iio/potentiometer/mcp4531.c
+++ b/drivers/iio/potentiometer/mcp4531.c
@@ -31,6 +31,8 @@
 #include <linux/module.h>
 #include <linux/i2c.h>
 #include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
 
 #include <linux/iio/iio.h>
 
@@ -188,13 +190,84 @@ static const struct iio_info mcp4531_info = {
 	.driver_module = THIS_MODULE,
 };
 
+#ifdef CONFIG_OF
+static const struct of_device_id mcp45xx_of_match[] = {
+	{ .compatible = "microchip,mcp4531-502", .data = (void *)MCP453x_502 },
+	{ .compatible = "microchip,mcp4531-103", .data = (void *)MCP453x_103 },
+	{ .compatible = "microchip,mcp4531-503", .data = (void *)MCP453x_503 },
+	{ .compatible = "microchip,mcp4531-104", .data = (void *)MCP453x_104 },
+	{ .compatible = "microchip,mcp4532-502", .data = (void *)MCP453x_502 },
+	{ .compatible = "microchip,mcp4532-103", .data = (void *)MCP453x_103 },
+	{ .compatible = "microchip,mcp4532-503", .data = (void *)MCP453x_503 },
+	{ .compatible = "microchip,mcp4532-104", .data = (void *)MCP453x_104 },
+	{ .compatible = "microchip,mcp4541-502", .data = (void *)MCP454x_502 },
+	{ .compatible = "microchip,mcp4541-103", .data = (void *)MCP454x_103 },
+	{ .compatible = "microchip,mcp4541-503", .data = (void *)MCP454x_503 },
+	{ .compatible = "microchip,mcp4541-104", .data = (void *)MCP454x_104 },
+	{ .compatible = "microchip,mcp4542-502", .data = (void *)MCP454x_502 },
+	{ .compatible = "microchip,mcp4542-103", .data = (void *)MCP454x_103 },
+	{ .compatible = "microchip,mcp4542-503", .data = (void *)MCP454x_503 },
+	{ .compatible = "microchip,mcp4542-104", .data = (void *)MCP454x_104 },
+	{ .compatible = "microchip,mcp4551-502", .data = (void *)MCP455x_502 },
+	{ .compatible = "microchip,mcp4551-103", .data = (void *)MCP455x_103 },
+	{ .compatible = "microchip,mcp4551-503", .data = (void *)MCP455x_503 },
+	{ .compatible = "microchip,mcp4551-104", .data = (void *)MCP455x_104 },
+	{ .compatible = "microchip,mcp4552-502", .data = (void *)MCP455x_502 },
+	{ .compatible = "microchip,mcp4552-103", .data = (void *)MCP455x_103 },
+	{ .compatible = "microchip,mcp4552-503", .data = (void *)MCP455x_503 },
+	{ .compatible = "microchip,mcp4552-104", .data = (void *)MCP455x_104 },
+	{ .compatible = "microchip,mcp4561-502", .data = (void *)MCP456x_502 },
+	{ .compatible = "microchip,mcp4561-103", .data = (void *)MCP456x_103 },
+	{ .compatible = "microchip,mcp4561-503", .data = (void *)MCP456x_503 },
+	{ .compatible = "microchip,mcp4561-104", .data = (void *)MCP456x_104 },
+	{ .compatible = "microchip,mcp4562-502", .data = (void *)MCP456x_502 },
+	{ .compatible = "microchip,mcp4562-103", .data = (void *)MCP456x_103 },
+	{ .compatible = "microchip,mcp4562-503", .data = (void *)MCP456x_503 },
+	{ .compatible = "microchip,mcp4562-104", .data = (void *)MCP456x_104 },
+	{ .compatible = "microchip,mcp4631-502", .data = (void *)MCP463x_502 },
+	{ .compatible = "microchip,mcp4631-103", .data = (void *)MCP463x_103 },
+	{ .compatible = "microchip,mcp4631-503", .data = (void *)MCP463x_503 },
+	{ .compatible = "microchip,mcp4631-104", .data = (void *)MCP463x_104 },
+	{ .compatible = "microchip,mcp4632-502", .data = (void *)MCP463x_502 },
+	{ .compatible = "microchip,mcp4632-103", .data = (void *)MCP463x_103 },
+	{ .compatible = "microchip,mcp4632-503", .data = (void *)MCP463x_503 },
+	{ .compatible = "microchip,mcp4632-104", .data = (void *)MCP463x_104 },
+	{ .compatible = "microchip,mcp4641-502", .data = (void *)MCP464x_502 },
+	{ .compatible = "microchip,mcp4641-103", .data = (void *)MCP464x_103 },
+	{ .compatible = "microchip,mcp4641-503", .data = (void *)MCP464x_503 },
+	{ .compatible = "microchip,mcp4641-104", .data = (void *)MCP464x_104 },
+	{ .compatible = "microchip,mcp4642-502", .data = (void *)MCP464x_502 },
+	{ .compatible = "microchip,mcp4642-103", .data = (void *)MCP464x_103 },
+	{ .compatible = "microchip,mcp4642-503", .data = (void *)MCP464x_503 },
+	{ .compatible = "microchip,mcp4642-104", .data = (void *)MCP464x_104 },
+	{ .compatible = "microchip,mcp4651-502", .data = (void *)MCP465x_502 },
+	{ .compatible = "microchip,mcp4651-103", .data = (void *)MCP465x_103 },
+	{ .compatible = "microchip,mcp4651-503", .data = (void *)MCP465x_503 },
+	{ .compatible = "microchip,mcp4651-104", .data = (void *)MCP465x_104 },
+	{ .compatible = "microchip,mcp4652-502", .data = (void *)MCP465x_502 },
+	{ .compatible = "microchip,mcp4652-103", .data = (void *)MCP465x_103 },
+	{ .compatible = "microchip,mcp4652-503", .data = (void *)MCP465x_503 },
+	{ .compatible = "microchip,mcp4652-104", .data = (void *)MCP465x_104 },
+	{ .compatible = "microchip,mcp4661-502", .data = (void *)MCP466x_502 },
+	{ .compatible = "microchip,mcp4661-103", .data = (void *)MCP466x_103 },
+	{ .compatible = "microchip,mcp4661-503", .data = (void *)MCP466x_503 },
+	{ .compatible = "microchip,mcp4661-104", .data = (void *)MCP466x_104 },
+	{ .compatible = "microchip,mcp4662-502", .data = (void *)MCP466x_502 },
+	{ .compatible = "microchip,mcp4662-103", .data = (void *)MCP466x_103 },
+	{ .compatible = "microchip,mcp4662-503", .data = (void *)MCP466x_503 },
+	{ .compatible = "microchip,mcp4662-104", .data = (void *)MCP466x_104 },
+	{ /*sentinel*/ }
+};
+#endif
+
 static int mcp4531_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
 	struct device *dev = &client->dev;
-	unsigned long devid = id->driver_data;
+	unsigned long devid;
 	struct mcp4531_data *data;
 	struct iio_dev *indio_dev;
+	const struct of_device_id *match;
 
 	if (!i2c_check_functionality(client->adapter,
 				     I2C_FUNC_SMBUS_WORD_DATA)) {
@@ -202,6 +275,13 @@ static int mcp4531_probe(struct i2c_client *client,
 		return -EIO;
 	}
 
+	match = of_match_device(of_match_ptr(mcp45xx_of_match), dev);
+	if (match) {
+		devid = (int)of_device_get_match_data(dev);
+	} else {
+		devid = id->driver_data;
+	}
+
 	indio_dev = devm_iio_device_alloc(dev, sizeof(*data));
 	if (!indio_dev)
 		return -ENOMEM;
@@ -291,6 +371,7 @@ MODULE_DEVICE_TABLE(i2c, mcp4531_id);
 static struct i2c_driver mcp4531_driver = {
 	.driver = {
 		.name	= "mcp4531",
+		.of_match_table = of_match_ptr(mcp45xx_of_match),
 	},
 	.probe		= mcp4531_probe,
 	.id_table	= mcp4531_id,
-- 
2.5.0

